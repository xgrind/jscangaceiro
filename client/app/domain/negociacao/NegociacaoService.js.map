{"version":3,"sources":["../../../app-src/domain/negociacao/NegociacaoService.js"],"names":["HttpService","Negociacao","NegociacaoService","constructor","_http","obtemNegociacoesDaSemana","get","then","dados","map","objeto","Date","data","quantidade","valor","err","Error","obtemNegociacoesDaSemanaAnterior","obtemNegociacoesDaSemanaRetrasada","obemNegociacoesDoPeriodo","Promise","all","periodo","reduce","novoArray","item","concat","sort","a","b","getTime","catch","console","log"],"mappings":";;;;;;AAASA,uB,sBAAAA,W;;AACAC,sB,iBAAAA,U;;;AAEF,kBAAMC,iBAAN,CAAwB;AAC3BC,8BAAc;AACV,yBAAKC,KAAL,GAAa,IAAIJ,WAAJ,EAAb;AACH;;AAEDK,2CAA2B;AACvB,2BAAO,KAAKD,KAAL,CACFE,GADE,CACE,oBADF,EAEFC,IAFE,CAGCC,SACIA,MAAMC,GAAN,CAAUC,UACN,IAAIT,UAAJ,CAAe,IAAIU,IAAJ,CAASD,OAAOE,IAAhB,CAAf,EACIF,OAAOG,UADX,EACuBH,OAAOI,KAD9B,CADJ,CAJL,EAQCC,OAAO;AACH,8BAAM,IAAIC,KAAJ,CAAU,wCAAV,CAAN;AACH,qBAVF,CAAP;AAYH;;AAEDC,mDAAmC;AAC/B,2BAAO,KAAKb,KAAL,CACFE,GADE,CACE,sBADF,EAEFC,IAFE,CAGCC,SACIA,MAAMC,GAAN,CAAUC,UACN,IAAIT,UAAJ,CAAe,IAAIU,IAAJ,CAASD,OAAOE,IAAhB,CAAf,EACIF,OAAOG,UADX,EACuBH,OAAOI,KAD9B,CADJ,CAJL,EAQCC,OAAO;AACH,8BAAM,IAAIC,KAAJ,CAAU,2DAAV,CAAN;AACH,qBAVF,CAAP;AAYH;;AAEDE,oDAAoC;AAChC,2BAAO,KAAKd,KAAL,CACFE,GADE,CACE,uBADF,EAEFC,IAFE,CAGCC,SACIA,MAAMC,GAAN,CAAUC,UACN,IAAIT,UAAJ,CAAe,IAAIU,IAAJ,CAASD,OAAOE,IAAhB,CAAf,EACIF,OAAOG,UADX,EACuBH,OAAOI,KAD9B,CADJ,CAJL,EAQCC,OAAO;AACH,8BAAM,IAAIC,KAAJ,CAAU,2DAAV,CAAN;AACH,qBAVF,CAAP;AAYH;;AAEDG,2CAA2B;AACvB,2BAAOC,QAAQC,GAAR,CAAY,CACf,KAAKhB,wBAAL,EADe,EAEf,KAAKY,gCAAL,EAFe,EAGf,KAAKC,iCAAL,EAHe,CAAZ,EAKNX,IALM,CAKDe,WAAWA,QACZC,MADY,CACL,CAACC,SAAD,EAAYC,IAAZ,KAAqBD,UAAUE,MAAV,CAAiBD,IAAjB,CADhB,EACwC,EADxC,EAEZE,IAFY,CAEP,CAACC,CAAD,EAAIC,CAAJ,KAAUA,EAAEjB,IAAF,CAAOkB,OAAP,KAAmBF,EAAEhB,IAAF,CAAOkB,OAAP,EAFtB,CALV,EASNC,KATM,CASAhB,OAAO;AACViB,gCAAQC,GAAR,CAAYlB,GAAZ;AACA,8BAAM,IAAIC,KAAJ,CAAU,mDAAV,CAAN;AACH,qBAZM,CAAP;AAaH;;AAhE0B","file":"NegociacaoService.js","sourcesContent":["import { HttpService } from '../../util/HttpService.js';\nimport { Negociacao } from './Negociacao.js';\n\nexport class NegociacaoService {\n    constructor() {\n        this._http = new HttpService();\n    }\n\n    obtemNegociacoesDaSemana() {     \n        return this._http\n            .get('negociacoes/semana')\n            .then(\n                dados => \n                    dados.map(objeto => \n                        new Negociacao(new Date(objeto.data), \n                            objeto.quantidade, objeto.valor))                                            \n                , \n                err => {\n                    throw new Error('Não foi possível obter as negociações.');\n                }\n            );        \n    }\n\n    obtemNegociacoesDaSemanaAnterior() {     \n        return this._http\n            .get('negociacoes/anterior')\n            .then(\n                dados => \n                    dados.map(objeto => \n                        new Negociacao(new Date(objeto.data), \n                            objeto.quantidade, objeto.valor))                                           \n                , \n                err => {\n                    throw new Error('Não foi possível obter as negociações da semana anterior.');\n                }\n            );        \n    }\n\n    obtemNegociacoesDaSemanaRetrasada() {\n        return this._http\n            .get('negociacoes/retrasada')\n            .then(\n                dados => \n                    dados.map(objeto => \n                        new Negociacao(new Date(objeto.data), \n                            objeto.quantidade, objeto.valor))\n                , \n                err => {\n                    throw new Error('Não foi possível obter as negociações da semana anterior.');\n                }\n            );  \n    }\n\n    obemNegociacoesDoPeriodo() {\n        return Promise.all([\n            this.obtemNegociacoesDaSemana(),\n            this.obtemNegociacoesDaSemanaAnterior(),\n            this.obtemNegociacoesDaSemanaRetrasada(),\n        ])\n        .then(periodo => periodo\n            .reduce((novoArray, item) => novoArray.concat(item), [])                \n            .sort((a, b) => b.data.getTime() - a.data.getTime())\n        )        \n        .catch(err => {\n            console.log(err);\n            throw new Error('Não foi possível obter as negociações do período.');\n        });\n    }\n\n    \n}"]}